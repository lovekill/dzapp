package com.engine.dzapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.engine.dzapp.dao.UserTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_TABLE.
*/
public class UserTableDao extends AbstractDao<UserTable, String> {

    public static final String TABLENAME = "USER_TABLE";

    /**
     * Properties of entity UserTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", true, "USER_NAME");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property Gespassword = new Property(2, String.class, "gespassword", false, "GESPASSWORD");
        public final static Property LoginTime = new Property(3, java.util.Date.class, "loginTime", false, "LOGIN_TIME");
    };


    public UserTableDao(DaoConfig config) {
        super(config);
    }
    
    public UserTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_TABLE' (" + //
                "'USER_NAME' TEXT PRIMARY KEY NOT NULL ," + // 0: userName
                "'PASSWORD' TEXT," + // 1: password
                "'GESPASSWORD' TEXT," + // 2: gespassword
                "'LOGIN_TIME' INTEGER);"); // 3: loginTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTable entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String gespassword = entity.getGespassword();
        if (gespassword != null) {
            stmt.bindString(3, gespassword);
        }
 
        java.util.Date loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindLong(4, loginTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserTable readEntity(Cursor cursor, int offset) {
        UserTable entity = new UserTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gespassword
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // loginTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTable entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGespassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserTable entity, long rowId) {
        return entity.getUserName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserTable entity) {
        if(entity != null) {
            return entity.getUserName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
